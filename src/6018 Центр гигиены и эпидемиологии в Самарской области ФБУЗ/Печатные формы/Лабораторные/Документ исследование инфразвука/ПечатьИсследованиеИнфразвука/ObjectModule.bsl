
&НаСервере
Функция ФормированиеТабличногоДокумента_Протокола(СсылкаНаОбъект, ТабДок)  Экспорт
	
	ВозрСтрукт = ФормированиеМасОбластей(СсылкаНаОбъект, "Протокол");
	Возврат ВозрСтрукт;

КонецФункции

&НаСервере
Функция ФормированиеТабличногоДокумента_Экспертного(СсылкаНаОбъект, ТабДок)  Экспорт
	
	ВозрСтрукт = ФормированиеМасОбластей(СсылкаНаОбъект, "Экспертное");
	Возврат ВозрСтрукт;
	
КонецФункции

Функция ФормированиеМасОбластей(СсылкаНаОбъект, ТипПечатнойФормы) Экспорт
	
	ВозрСтрукт = Новый Структура;
	сч = 0;
	
	Если ТипПечатнойФормы = "Исследование" Тогда
		МакетОбработки = ПолучитьМакет("Макет");
		ОбластьШапка                    = МакетОбработки.ПолучитьОбласть("Шапка");
		ОбластьЗаведующий 			= МакетОбработки.ПолучитьОбласть("Заведующий"); 
		ОбластьРезультатыОбработал 	= МакетОбработки.ПолучитьОбласть("РезультатыОбработал");
		ОбластьИзмеренияПроводил 	= МакетОбработки.ПолучитьОбласть("ИзмеренияПроводил");
	ИначеЕсли ТипПечатнойФормы	= "Протокол" Тогда
		МакетОбработки		= ПолучитьМакет("МакетПротокола");
		ОбластьПустаяСтрока	= МакетОбработки.ПолучитьОбласть("ПустаяСтрока");
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьПустаяСтрока);
	ИначеЕсли ТипПечатнойФормы	= "Экспертное" Тогда
		МакетОбработки		= ПолучитьМакет("МакетЭкспертного");
		ОбластьПустаяСтрока	= МакетОбработки.ПолучитьОбласть("ПустаяСтрока");
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьПустаяСтрока);
	КонецЕсли;
	
	#Область ОпределениеОбщихОбластей
	
	ОбластьПустаяСтрока     = МакетОбработки.ПолучитьОбласть("ПустаяСтрока"); 
	ОбластьШапка = МакетОбработки.ПолучитьОбласть("Шапка");	
	ОбластьШапкаТаблицаИсточникиФизФакторов    = МакетОбработки.ПолучитьОбласть("ШапкаТаблицаИсточникиФизФакторов");
	ОбластьСтрокаТаблицаИсточникиФизФакторов   = МакетОбработки.ПолучитьОбласть("ТаблицаИсточникиФизФакторов");
	                                                                            
	ОбластьШапкаТаблицаРезультатыИзмерений     = МакетОбработки.ПолучитьОбласть("ШапкаТаблицаРезультатыИзмерений");
	ОбластьСтрокаТаблицаРезультатыИзмерений    = МакетОбработки.ПолучитьОбласть("ТаблицаРезультатыИзмерений");
	
	ОбластьШапкаТаблицаСредстваИзмерения = МакетОбработки.ПолучитьОбласть("ШапкаТаблицаСредстваИзмерения");	
	ОбластьТаблицаСредстваИзмерения = МакетОбработки.ПолучитьОбласть("ТаблицаСредстваИзмерения"); 
	ОбластьНормативнаяДокументация  = МакетОбработки.ПолучитьОбласть("НормативнаяДокументация");    
	ОбластьНД = МакетОбработки.ПолучитьОбласть("НД");    
	ОбластьПункт7  = МакетОбработки.ПолучитьОбласть("Пункт7"); 
	ОбластьПункт8  = МакетОбработки.ПолучитьОбласть("Пункт8"); 
	ОбластьПункт9  = МакетОбработки.ПолучитьОбласть("Пункт9"); 
	ОбластьПункт10 = МакетОбработки.ПолучитьОбласть("Пункт10"); 

	#КонецОбласти
	
	
	ВозрСтрукт = Новый Структура;
	
	сч = 0;
	
	Если  ТипПечатнойФормы	= "Протокол" Или ТипПечатнойФормы	= "Экспертное"  Тогда
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьПустаяСтрока);
	КонецЕсли;
	
	#Область Шапка
	
	ОбластьШапка.Параметры.Номер 	= СсылкаНаОбъект.НомерВЖурнале;
	ОбластьШапка.Параметры.Дата 	= Формат(СсылкаНаОбъект.Дата,"ДЛФ=Д"); 	
	
	Если ТипПечатнойФормы <> "Экспертное" Тогда
		
		Если ЗначениеЗаполнено(Час(СсылкаНаОбъект.ДатаИВремяИсследования)) Тогда
			ОбластьШапка.Параметры.ДатаИзмерений	= Формат(СсылкаНаОбъект.ДатаИВремяИсследования,"ДФ='dd.MM.yyyy ЧЧ ""ч"" мм ""мин""'");
		Иначе
			ОбластьШапка.Параметры.ДатаИзмерений	= Формат(СсылкаНаОбъект.ДатаИВремяИсследования,"ДФ='dd.MM.yyyy");
		КонецЕсли;
		
		ОбластьШапка.Параметры.МестоПроведенияЗамеров	= СсылкаНаОбъект.МестоПроведенияЗамеров;
		ОбластьШапка.Параметры.ЦельИзмерения			= СсылкаНаОбъект.ЦельИзмерения.Наименование;
		ОбластьШапка.Параметры.ПриЗамерахПрисутствовали	= СсылкаНаОбъект.ПриЗамерахПрисутствовали;
		
	КонецЕсли;

	ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьШапка);
	
	#КонецОбласти
	
	Если ТипПечатнойФормы <> "Экспертное" Тогда
		
		#Область Средства_измерения       
		
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт,ОбластьШапкаТаблицаСредстваИзмерения); 	 
		
		ПорНомер = 0;
		Для каждого Стр из СсылкаНаОбъект.СредстваИзмерения Цикл 		
			
			ПорНомер = ПорНомер +1;     
			ОбластьТаблицаСредстваИзмерения.Параметры.ПорНомер        = ПорНомер ;
			ОбластьТаблицаСредстваИзмерения.Параметры.Наименование = Стр.СредствоИзмерения;
			ОбластьТаблицаСредстваИзмерения.Параметры.Номер        = Стр.СредствоИзмерения.Номер;
			ОбластьТаблицаСредстваИзмерения.Параметры.СвидетельствоОПроверкеНомер = Стр.СредствоИзмерения.НомерСвидетельстваОПроверке;
			ОбластьТаблицаСредстваИзмерения.Параметры.ПоверенДо    = Формат(Стр.СредствоИзмерения.ПроверенДо,"ДФ=dd.MM.yyyy");
			ОбластьТаблицаСредстваИзмерения.Параметры.Погрешность  = Стр.СредствоИзмерения.Погрешность;
			
			ДобавлениеОбластиВструктуру(сч, ВозрСтрукт,ОбластьТаблицаСредстваИзмерения);
			
		КонецЦикла; 
		
		#КонецОбласти
		
		#Область НД
		
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт,ОбластьНормативнаяДокументация);	 
		
		щщ = 0;
		Для каждого СтрМетодики Из СсылкаНаОбъект.МетодикиОтбора Цикл
			
			щщ = щщ + 1;
			Если  щщ = 1 Тогда    			
				НД = СтрМетодики.Методика.ПолноеНаименование; 			
			Иначе    			
				НД = НД +"
				|" + СтрМетодики.Методика.ПолноеНаименование;  			
			КонецЕсли;   		
			
		КонецЦикла;
		
		ОбластьНД.Параметры.НД = НД;	 
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьНД); 	 
		
		#КонецОбласти
		
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьПункт7); 
		
		#Область ИСТОЧНИКИ_ФИЗ_ФАКТОРОВ
		
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьШапкаТаблицаИсточникиФизФакторов);
		ПорНомер = 0;
		
		Для каждого СтрФФ Из СсылкаНаОбъект.ИсточникиФизическихФакторов Цикл
			
			ПорНомер = ПорНомер + 1;		
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПорНомер 	  = ПорНомер;
			
			НайденныеСтроки =  СсылкаНаОбъект.Показатели.НайтиСтроки(Новый Структура("ГУИД", СтрФФ.ГУИД));
			Если НайденныеСтроки.Количество() Тогда
				ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.МестоИзмерения = НайденныеСтроки[0].ОбъектИсследования;
			КонецЕсли;
			
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ИсточникФизФакторов 	= СтрФФ.ИсточникФизФакторов;
			
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПараметрШир 	  = ?(СтрФФ.Широкополосный = Истина,"X","");
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПараметрТон 	  = ?(СтрФФ.Тональный = Истина,"X","");
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПараметрПост   = ?(СтрФФ.Постоянный = Истина,"X","");
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПараметрКолеб  = ?(СтрФФ.Колеблющийся = Истина,"X","");
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПараметрПрерыв = ?(СтрФФ.Прерывистый = Истина,"X","");
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПараметрИмп 	  = ?(СтрФФ.Импульсный = Истина,"X","");
			
			ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьСтрокаТаблицаИсточникиФизФакторов);
			
		КонецЦикла;
		
		#КонецОбласти
		
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьПункт8);
		
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт,ОбластьПункт9);	
		
	КонецЕсли;
	
	
	#Область Результаты_исследования   
	
	ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьШапкаТаблицаРезультатыИзмерений); 
	
	ВремТЗ_РабМест        = СсылкаНаОбъект.Показатели.Выгрузить(,"ТипОбъектаИсследования, ОбъектИсследования, ГУИД");
	ВремТЗ_РабМест.Свернуть("ТипОбъектаИсследования, ОбъектИсследования, ГУИД");
	ВремТЗ_ТочкиИзмерения = СсылкаНаОбъект.Показатели.Выгрузить(,"ГУИД, ТочкаИзмерения, ГУИДТочкаИзмерения");
	ВремТЗ_ТочкиИзмерения.Свернуть("ГУИД, ТочкаИзмерения, ГУИДТочкаИзмерения");    
	ВремТЗ_Показатели     = СсылкаНаОбъект.Показатели.Выгрузить(,"ГУИД, ГУИДТочкаИзмерения,УровеньЗвДавл2, УровеньЗвДавл4,УровеньЗвДавл8, УровеньЗвДавл16, ЭквивалентныйУровеньЗвука, МаксимальныйУровеньЗвука, Параметр");
	ВремТЗ_Показатели.Свернуть("ГУИД, ГУИДТочкаИзмерения,УровеньЗвДавл2, УровеньЗвДавл4,УровеньЗвДавл8, УровеньЗвДавл16,ЭквивалентныйУровеньЗвука, МаксимальныйУровеньЗвука, Параметр");
	
	
	ПорНомер = 0;
	Для каждого СтрРабМесто Из ВремТЗ_РабМест  Цикл
		
		НайдТочкиИзмер = ВремТЗ_ТочкиИзмерения.НайтиСтроки(Новый Структура("ГУИД", СтрРабМесто.ГУИД));
		
		Для каждого СтрТочкаИзмерния Из НайдТочкиИзмер Цикл
			
			ПорНомер = ПорНомер + 1;
			ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.НомерПоПорядку = ПорНомер;
			//ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.МестоИзмерения = СтрТочкаИзмерния.ТочкаИзмерения;
			ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.МестоИзмерения = СтрРабМесто.ОбъектИсследования;
			
			//Lизм 
			НайденныеСтрокиLизм = ВремТЗ_Показатели.НайтиСтроки(Новый Структура("ГУИДТочкаИзмерения, Параметр", СтрТочкаИзмерния.ГУИДТочкаИзмерения, "Lизм"));
			
			Если НайденныеСтрокиLизм.Количество() Тогда
				
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Lизм2  = НайденныеСтрокиLизм[0].УровеньЗвДавл2;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Lизм4  = НайденныеСтрокиLизм[0].УровеньЗвДавл4;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Lизм8 = НайденныеСтрокиLизм[0].УровеньЗвДавл8;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Lизм16 = НайденныеСтрокиLизм[0].УровеньЗвДавл16;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.LизмЭквивал  = НайденныеСтрокиLизм[0].ЭквивалентныйУровеньЗвука;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.LизмМаксУров = НайденныеСтрокиLизм[0].МаксимальныйУровеньЗвука;
			КонецЕсли;
			
			//ПДУ
			НайденныеСтрокиПДУ = ВремТЗ_Показатели.НайтиСтроки(Новый Структура("ГУИДТочкаИзмерения, Параметр", СтрТочкаИзмерния.ГУИДТочкаИзмерения, "ПДУ") );
			
			Если НайденныеСтрокиПДУ.Количество() Тогда
				
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПДУ2  = НайденныеСтрокиПДУ[0].УровеньЗвДавл2;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПДУ4  = НайденныеСтрокиПДУ[0].УровеньЗвДавл4;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПДУ8 = НайденныеСтрокиПДУ[0].УровеньЗвДавл8;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПДУ16 = НайденныеСтрокиПДУ[0].УровеньЗвДавл16;
				
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПДУЭквивал  = НайденныеСтрокиПДУ[0].ЭквивалентныйУровеньЗвука;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПДУМаксУров = НайденныеСтрокиПДУ[0].МаксимальныйУровеньЗвука;
			КонецЕсли;
			
			//поправка к ПДУ
			НайденныеСтрокиПоправ = ВремТЗ_Показатели.НайтиСтроки(Новый Структура("ГУИДТочкаИзмерения, Параметр", СтрТочкаИзмерния.ГУИДТочкаИзмерения, "поправка к ПДУ") );
			
			Если НайденныеСтрокиПоправ.Количество() Тогда
				
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Поправ2  = НайденныеСтрокиПоправ[0].УровеньЗвДавл2;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Поправ4  = НайденныеСтрокиПоправ[0].УровеньЗвДавл4;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Поправ8 = НайденныеСтрокиПоправ[0].УровеньЗвДавл8;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Поправ16 = НайденныеСтрокиПоправ[0].УровеньЗвДавл16;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПоправЭквивал  = НайденныеСтрокиПоправ[0].ЭквивалентныйУровеньЗвука;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПоправМаксУров = НайденныеСтрокиПоправ[0].МаксимальныйУровеньЗвука;
			КонецЕсли;
			
			//превышение
			НайденныеСтрокиПревыш = ВремТЗ_Показатели.НайтиСтроки(Новый Структура("ГУИДТочкаИзмерения, Параметр", СтрТочкаИзмерния.ГУИДТочкаИзмерения, "превышение") );
			
			Если НайденныеСтрокиПревыш.Количество() Тогда
				
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Превыш2  = НайденныеСтрокиПревыш[0].УровеньЗвДавл2;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Превыш4  = НайденныеСтрокиПревыш[0].УровеньЗвДавл4;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Превыш8 = НайденныеСтрокиПревыш[0].УровеньЗвДавл8;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Превыш16 = НайденныеСтрокиПревыш[0].УровеньЗвДавл16;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПревышЭквивал  = НайденныеСтрокиПревыш[0].ЭквивалентныйУровеньЗвука;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПревышМаксУров = НайденныеСтрокиПревыш[0].МаксимальныйУровеньЗвука;
				
			КонецЕсли;
			
			ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьСтрокаТаблицаРезультатыИзмерений);
			
		КонецЦикла;
		
	КонецЦикла;  
	
	#КонецОбласти
	
	Если ТипПечатнойФормы <> "Экспертное" Тогда
		
		ОбластьПункт10.Параметры.ДополнительныеCведения = СсылкаНаОбъект.ДополнительныеСведения;
		ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьПункт10);
		
		#Область Подвал  	
		
		Если ТипПечатнойФормы = "Исследование" Тогда
			
			Если  СсылкаНаОбъект.Подписывающие.Количество()   Тогда
				
				Для каждого Подписывающий Из СсылкаНаОбъект.Подписывающие Цикл
					
					ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилДолжность = Подписывающий.Сотрудник.Должность; 
					ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилСотрудник = Подписывающий.Сотрудник;
					ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьИзмеренияПроводил);
					
				КонецЦикла; 
				
			Иначе
				
				ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилДолжность = СсылкаНаОбъект.Ответственный.Сотрудник.Должность; 
				ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилСотрудник = СсылкаНаОбъект.Ответственный.Сотрудник;
				ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьИзмеренияПроводил);
				
			КонецЕсли;	
			
			ОбластьРезультатыОбработал.Параметры.РезультатыОбработалДолжность = СсылкаНаОбъект.Ответственный.Сотрудник.Должность; 
			ОбластьРезультатыОбработал.Параметры.РезультатыОбработалСотрудник = СсылкаНаОбъект.Ответственный.Сотрудник;
			ДобавлениеОбластиВструктуру(сч, ВозрСтрукт,ОбластьРезультатыОбработал);  
			
			ОбластьЗаведующий.Параметры.ЗаведующийДолжность	= СсылкаНаОбъект.Ответственный.Лаборатория.Заведующий.Должность; 
			ОбластьЗаведующий.Параметры.Заведующий			= СсылкаНаОбъект.Ответственный.Лаборатория.Заведующий; 
			ДобавлениеОбластиВструктуру(сч, ВозрСтрукт, ОбластьЗаведующий);
			
		КонецЕсли;
		
		#КонецОбласти            
		
		#Область Изображения
		
		МассивРасширенийКартинок = Новый Массив;
		МассивРасширенийКартинок.Добавить("png");
		МассивРасширенийКартинок.Добавить("jpeg");	
		МассивРасширенийКартинок.Добавить("jpg");
		МассивРасширенийКартинок.Добавить("gif"); 	 
		МассивРасширенийКартинок.Добавить("bmp");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.ТекущаяВерсияРасширение В(&СписокРасширений)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ВладелецФайла",    СсылкаНаОбъект);   	
		Запрос.УстановитьПараметр("СписокРасширений", МассивРасширенийКартинок); 
		
		Результат =  Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() Тогда
			
			Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			
			ОбластьПриложениеЗаголовок = МакетОбработки.ПолучитьОбласть("ПриложениеЗаголовок");
			ОбластьПриложениеЗаголовок.Параметры.Номер = СсылкаНаОбъект.НомерВЖурнале;
			ДобавлениеОбластиВСТруктуру(сч, ВозрСтрукт,ОбластьПриложениеЗаголовок);
			
			Для каждого Стр Из Результат Цикл   
				
				ОбластьПриложение = МакетОбработки.ПолучитьОбласть("Приложение");
				
				Адрес = ПолучитьДанныеФайлаДляОткрытия(Стр.Файл);
				ДвДанныеФайл = ПолучитьИзВременногоХранилища(Адрес);
				
				ИмяВремФайла 		= ПолучитьИмяВременногоФайла(Стр.ТекущаяВерсияРасширение);
				ДвДанныеФайл.Записать(ИмяВремФайла);
				
				ПутьИИмя = ИмяВремФайла;
				Путь = "";
				Имя  = "";
				ПозСлэш = Найти(ПутьИИмя,"\");
				Пока ПозСлэш > 0 Цикл
					Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
					ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
					ПозСлэш = Найти(ПутьИИмя,"\");
				КонецЦикла;
				Имя = ПутьИИмя;
				
				КатологВремФайлов 	= СтрЗаменить(ИмяВремФайла, ПутьИИмя, "");
				
				
				objShellApp = Новый COMОбъект("Shell.Application");
				objFolder	= objShellApp.NameSpace(СокрЛП(КатологВремФайлов));
				objItem		= objFolder.ParseName(СокрЛП(Имя)); 
				размеры		= objFolder.GetDetailsOf(objItem, 31); 
				размеры 	= СтрЗаменить(размеры, Символ(8236), ""); //
				размеры 	= СтрЗаменить(размеры, Символ(8234), ""); //
				р 			= Найти(размеры, "x");
				ширина 		= Число(Лев(размеры, р - 1));
				высота 		= Число(Сред(размеры, р + 2));
				
				Если Ширина > 160 Тогда
					
					Коэф 	= Ширина/160;
					Высота 	= высота/Коэф;
					Ширина 	= Ширина/Коэф;
				ИначеЕсли Высота > 300 Тогда
					
					Коэф 	= высота/300;
					Высота 	= высота/Коэф;
					Ширина 	= Ширина/Коэф;
					
				КонецЕсли;
				
				Рисунок = ОбластьПриложение.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
				Рисунок.Верх 	= 5; 
				Рисунок.Высота 	= высота; 
				Рисунок.Ширина 	= ширина; 
				Рисунок.Лево 	= 5; 
				Рисунок.Картинка = Новый Картинка(ДвДанныеФайл); 
				Рисунок.Линия 	 = Линия;
				Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально; 
				
				ДобавлениеОбластиВСТруктуру(сч, ВозрСтрукт,ОбластьПриложение);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;

	Возврат ВозрСтрукт;

КонецФункции

// Делает ПолучитьДанныеФайла + ПоместитьВоВременноеХранилище (если файл хранится на диске)
// Функция возвращает структуру, содержащую различные сведения о Файле и версии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаДляОткрытия(
	ФайлСсылка, 
	ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, 
	РабочийКаталогВладельца = Неопределено,
	ПредыдущийАдресФайла = Неопределено) Экспорт
	//
	//Если ПредыдущийАдресФайла <> Неопределено Тогда
	//	Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
	//		УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
	//	КонецЕсли;	
	//КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = ПолучитьРабочийКаталог(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ИмяФайлаСПутемВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
					   |	ВерсииФайлов.Том КАК Том
					   |ИЗ
					   |	Справочник.ВерсииФайлов КАК ВерсииФайлов
					   |ГДЕ
					   |	ВерсииФайлов.Ссылка = &Версия";
					   
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = ""; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
						
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);   			
			
		
			//мФайл = Новый Файл(ИмяВрем);
			//ДвДанныеФайл = Новый ДвоичныеДанные(ИмяФайла);		
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			
			Возврат Адрес;
			
			
				
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецФункции // ПолучитьДанныеФайлаДляОткрытия()

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки)
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//
// Возвращаемое значение:
//   Строка  - рабочий каталог
Функция ПолучитьРабочийКаталог(СсылкаПапки) Экспорт
	
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат ""
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

&НаСервере
Процедура ДобавлениеОбластиВСТруктуру(сч, ВозрСтрукт, Область)
	
	сч=сч+1;
	ВозрСтрукт.Вставить("ТабДок" + сч, Новый ТабличныйДокумент);
	ВозрСтрукт["ТабДок" + сч].РазмерКолонтитулаСнизу	= 10;
	ВозрСтрукт["ТабДок" + сч].ПолеСнизу					= 15;
	ВозрСтрукт["ТабДок" + сч].ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;  
	ВозрСтрукт["ТабДок" + сч].Вывести(Область);

КонецПроцедуры
