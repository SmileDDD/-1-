//======================================================================================================================

#Область ОбРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СсылкаНаОбъект") Тогда		
		
		Объект.СсылкаНаОбъект = Параметры.СсылкаНаОбъект;  
		
		Если Параметры.Свойство("СсылкаНаВнешОбр") Тогда
			НаборЗаписей = РегистрыСведений._ИМЦ_Исследование_ПечатнаяФорма.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Объект.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Запись = НаборЗаписей.Добавить();			
			Запись.Документ			= Объект.СсылкаНаОбъект;; 
			Запись.ВнешняяОбработка	= Параметры.СсылкаНаВнешОбр;			
			НаборЗаписей.Записать(); 
		КонецЕсли;
		
	КонецЕсли
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если ЗначениеЗаполнено(Объект.СсылкаНаОбъект) Тогда
		Отказ = Истина;
		ТабДок = ПечатьТабДок();  		
		_ИМЦ_МодульФайлыПечатьКлиент.СозданиеФайлаПриПечатиИзВнешнихОбработок(ТабДок,Объект.ССылкаНаОбъект,ПрефиксНаименованияФайла,ЭтаФорма);
	КонецЕсли;
	

КонецПроцедуры

#КонецОбласти

//======================================================================================================================

#Область ОБРАБОТЧИКИ_КОМАНД

&НаКлиенте
Процедура Печать(Команда)
	
	ТабДок = ПечатьТабДок();
	ТабДок.Показать();   
	
	//ТабДок = ПечатьИзМодуляОбъекта();
	//ТабДок.Показать();   	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПротокола(Команда)
	
	ТабДок = ПечатьИзМодуляОбъекта("Протокол");
	ТабДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭкспетрного(Команда)
	
	ТабДок = ПечатьИзМодуляОбъекта("Экспертное");
	ТабДок.Показать();

КонецПроцедуры

#КонецОбласти

//======================================================================================================================

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
функция ПечатьТабДок()
	
	ТабДок = Новый ТабличныйДокумент;
	
	
	ДанныйОбъект          = РеквизитФормыВЗначение("Объект");
	
	//ЭтотОбъект.ФормированиеТабличногоДокумента();

	МакетОбработки = ДанныйОбъект.ПолучитьМакет("Макет");	
	
	ОбластьПустаяСтрока     = МакетОбработки.ПолучитьОбласть("ПустаяСтрока");  
	
	ОбластьШапка = МакетОбработки.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицаИсточникиФизФакторов		= МакетОбработки.ПолучитьОбласть("ШапкаТаблицаИсточникиФизФакторов");
	ОбластьСтрокаТаблицаИсточникиФизФакторов	= МакетОбработки.ПолучитьОбласть("ТаблицаИсточникиФизФакторов");    	
	ОбластьШапкаТаблицаРезультатыИзмерений		= МакетОбработки.ПолучитьОбласть("ШапкаТаблицаРезультатыИзмерений");
	ОбластьСтрокаТаблицаРезультатыИзмерений		= МакетОбработки.ПолучитьОбласть("ТаблицаРезультатыИзмерений");
	ОбластьНормативнаяДокументация				= МакетОбработки.ПолучитьОбласть("НормативнаяДокументация");	
	
	//Шапка	
	ОбластьШапка.Параметры.Номер					= Объект.СсылкаНаОбъект.НомерВЖурнале;
	ОбластьШапка.Параметры.Дата						= Формат(Объект.СсылкаНаОбъект.Дата,"ДЛф=Д");	
	
	Если ЗначениеЗаполнено(Час(Объект.СсылкаНаОбъект.ДатаИВремяИсследования)) Тогда
		ОбластьШапка.Параметры.ДатаИзмерений	= Формат(Объект.СсылкаНаОбъект.ДатаИВремяИсследования,"ДФ='dd.MM.yyyy ЧЧ ""г.,"" ""ч"" мм ""мин""'");
	Иначе
		ОбластьШапка.Параметры.ДатаИзмерений	= Формат(Объект.СсылкаНаОбъект.ДатаИВремяИсследования,"ДФ='dd.MM.yyyy");
	КонецЕсли;
	
	ОбластьШапка.Параметры.МестоПроведенияЗамеров	= Объект.СсылкаНаОбъект.МестоПроведенияЗамеров;
	ОбластьШапка.Параметры.ЦельИзмерения			= Объект.СсылкаНаОбъект.ЦельИзмерения.Наименование;
	ОбластьШапка.Параметры.ПриЗамерахПрисутствовали	= Объект.СсылкаНаОбъект.ПриЗамерахПрисутствовали;

	
	ПрефиксНаименованияФайла = "ЭМИ_50_" + СтрЗаменить(Объект.СсылкаНаОбъект.НомерВЖурнале,"/", "") + Формат(Объект.СсылкаНаОбъект.Дата,"ДФ='""_от_""dd_MM_yy'");
	
	//ОбластьШапка.Параметры.Цельзмерения = ПродуктИсследования;  	
	ТабДок.Вывести(ОбластьШапка);
	
	 //ТаблицаСредстваИзмерения
	 #Область Средства_измерения
	 
	 ОбластьШапкаТаблицаСредстваИзмерения = МакетОбработки.ПолучитьОбласть("ШапкаТаблицаСредстваИзмерения"); 
	 ТабДок.Вывести(ОбластьШапкаТаблицаСредстваИзмерения);
	 
	 ОбластьТаблицаСредстваИзмерения = МакетОбработки.ПолучитьОбласть("ТаблицаСредстваИзмерения"); 
	 сч = 0;
	 ПорНомер = 0;
	 Для каждого Стр из Объект.СсылкаНаОбъект.СредстваИзмерения Цикл 		
		 
		 ПорНомер																= ПорНомер +1;     
		 ОбластьТаблицаСредстваИзмерения.Параметры.ПорНомер						= ПорНомер ;
		 ОбластьТаблицаСредстваИзмерения.Параметры.Наименование					= Стр.СредствоИзмерения;
		 ОбластьТаблицаСредстваИзмерения.Параметры.Номер						= Стр.СредствоИзмерения.Номер;
		 ОбластьТаблицаСредстваИзмерения.Параметры.СвидетельствоОПроверкеНомер	= Стр.СредствоИзмерения.НомерСвидетельстваОПроверке;
		 ОбластьТаблицаСредстваИзмерения.Параметры.ПоверенДо					= Формат(Стр.СредствоИзмерения.ПроверенДо,"ДФ=dd.MM.yyyy");
		 ОбластьТаблицаСредстваИзмерения.Параметры.Погрешность					= Стр.СредствоИзмерения.Погрешность;
		 ТабДок.Вывести(ОбластьТаблицаСредстваИзмерения); 		
		 
	 КонецЦикла;  
	 сч = ПорНомер; 
	 #КонецОбласти
	
	 //НД 
	 #Область НД
	 
	  ТабДок.Вывести(ОбластьНормативнаяДокументация);
	 
	 ОбластьНД = МакетОбработки.ПолучитьОбласть("НД");
	 щщ = 0;
	 Для каждого СтрМетодики Из Объект.СсылкаНаОбъект.МетодикиОтбора Цикл
		 
		 щщ = щщ + 1;
		 Если  щщ = 1 Тогда    			
			 НД = СтрМетодики.Методика.ПолноеНаименование; 			
		 Иначе    			
			 НД = НД +"
			 |" + СтрМетодики.Методика.ПолноеНаименование;  			
		 КонецЕсли;   		
		 
	 КонецЦикла;
	 
	 ОбластьНД.Параметры.НД = НД;
	 ТабДок.Вывести(ОбластьНД);
	 
	 #КонецОбласти
	
	//Пункт7
	ОбластьПункт7 = МакетОбработки.ПолучитьОбласть("Пункт7"); 
	ТабДок.Вывести(ОбластьПункт7);
	
	//источники физ факторов
	#Область ИСТОЧНИКИ_ФИЗ_ФАКТОРОВ
	
	ТабДок.Вывести(ОбластьШапкаТаблицаИсточникиФизФакторов);
	
	ПорНомер = 0;
	
	Для каждого СтрФФ Из Объект.СсылкаНаОбъект.ИсточникиФизическихФакторов Цикл
		
		ПорНомер = ПорНомер + 1;		
		ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ПорНомер 	  = ПорНомер;
	
		НайденныеСтроки =  Объект.СсылкаНаОбъект.Показатели.НайтиСтроки(Новый Структура("ГУИД", СтрФФ.ГУИД));
		Если НайденныеСтроки.Количество() Тогда
			
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.МестоИзмерения 		= НайденныеСтроки[0].ТочкаИзмерения;
			ОбластьСтрокаТаблицаИсточникиФизФакторов.Параметры.ИсточникФизФакторов 	= СтрФФ.ИсточникФизФакторов;
			ТабДок.Вывести(ОбластьСтрокаТаблицаИсточникиФизФакторов);
			
		КонецЕсли;      
    	
	КонецЦикла;
	
	#КонецОбласти

	
	//Пункт8
	ОбластьПункт8 = МакетОбработки.ПолучитьОбласть("Пункт8"); 
	ТабДок.Вывести(ОбластьПункт8);
	
	//Пункт9 
	ОбластьПункт9 = МакетОбработки.ПолучитьОбласть("Пункт9"); 
	ТабДок.Вывести(ОбластьПункт9);
	
	//результаты измерений
	#Область Результаты_исследования   
	
	ТабДок.Вывести(ОбластьШапкаТаблицаРезультатыИзмерений);
	
	ВремТЗ_ТочкиИзм       = Объект.СсылкаНаОбъект.Показатели.Выгрузить(,
	"ГУИД, Комментарий, СоответствуетНормам, ТипТочкиИзмерения, МестоИзмерения, ТочкаИзмерения");
	ВремТЗ_ТочкиИзм.Свернуть(
	"ГУИД, Комментарий, СоответствуетНормам, ТипТочкиИзмерения, МестоИзмерения, ТочкаИзмерения");
	
	ВремТЗ_МестоИзм       = Объект.СсылкаНаОбъект.Показатели.Выгрузить(," МестоИзмерения");
	ВремТЗ_МестоИзм.Свернуть("МестоИзмерения");
	
	ОбластьМестоИзмерения = МакетОбработки.ПолучитьОбласть("МестоИзмерения");
	
	
	ПорНомер = 0;
	Для Каждого СтрМестрИзм  Из ВремТЗ_МестоИзм Цикл
		
		ОбластьМестоИзмерения.Параметры.МестоИзмерения = СтрМестрИзм.МестоИзмерения; 
		ТабДок.Вывести(ОбластьМестоИзмерения);
		
		НайденныеТочкиИзм = ВремТЗ_ТочкиИзм.НайтиСтроки(Новый Структура("МестоИзмерения", СтрМестрИзм.МестоИзмерения));
		Если НайденныеТочкиИзм.Количество() Тогда
			
			Для каждого СтрТочкаИзм Из НайденныеТочкиИзм  Цикл
				
				ВремТабДок = Новый ТабличныйДокумент;
				ПорНомер = ПорНомер + 1;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ПорНомер = ПорНомер;
				ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.ТочкаИзмерения = СтрТочкаИзм.ТочкаИзмерения;
				
				НайденныйВыс = Объект.СсылкаНаОбъект.Показатели.НайтиСтроки(Новый Структура("ГУИД", СтрТочкаИзм.ГУИД));
				
				Если НайденныеСтроки.Количество() Тогда
					
					КолвоВысот = НайденныеСтроки.Количество();
					Для Каждого СтрВысоты Из НайденныйВыс Цикл
						
						ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Условие	= СтрВысоты.ВысотаИзмерения;
						ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Е50		= СтрВысоты.Е_50_Строка;
						ОбластьСтрокаТаблицаРезультатыИзмерений.Параметры.Н50		= СтрВысоты.Н_50_Строка; 				
						
						ВремТабДок.Вывести(ОбластьСтрокаТаблицаРезультатыИзмерений);
					КонецЦикла;
					
					ОбъекдОбластПорНомер = ВремТабДок.Область(1  , 3,  КолвоВысот  ,4);
					ОбъекдОбластПорНомер.Объединить();
					
					ОбъекдОбластьМестоИзм = ВремТабДок.Область(1  , 5,  КолвоВысот  ,29);
					ОбъекдОбластьМестоИзм.Объединить(); 
					
					
					
					ТабДок.Вывести(ВремТабДок);
					
				КонецЕсли; 
				
			КонецЦикла;  
			
		КонецЕсли;  		
		
	КонецЦикла; 
	
	#КонецОбласти
	
	//Пункт10 
	ОбластьПункт10 = МакетОбработки.ПолучитьОбласть("Пункт10"); 
	ОбластьПункт10.Параметры.ДополнительныеCведения = Объект.СсылкаНаОбъект.ДополнительныеСведения;
	ТабДок.Вывести(ОбластьПункт10);	
	
	//подвал
	#Область Подвал  	
	ОбластьЗаведующий = МакетОбработки.ПолучитьОбласть("Заведующий"); 
	ОбластьРезультатыОбработал = МакетОбработки.ПолучитьОбласть("РезультатыОбработал");
	ОбластьИзмеренияПроводил = МакетОбработки.ПолучитьОбласть("ИзмеренияПроводил");

	Если  Объект.СсылкаНаОбъект.Подписывающие.Количество()   Тогда
		
		Для каждого Подписывающий Из Объект.СсылкаНаОбъект.Подписывающие Цикл
			
			ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилДолжность = Подписывающий.Сотрудник.Должность; 
			ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилСотрудник = Подписывающий.Сотрудник;
			ТабДок.Вывести(ОбластьИзмеренияПроводил);
			
		КонецЦикла; 
		
	Иначе
		
		ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилДолжность = Объект.СсылкаНаОбъект.Ответственный.Сотрудник.Должность; 
		ОбластьИзмеренияПроводил.Параметры.ИзмеренияПроводилСотрудник = Объект.СсылкаНаОбъект.Ответственный.Сотрудник;
		ТабДок.Вывести(ОбластьИзмеренияПроводил);

	КонецЕсли;	
	
	ОбластьРезультатыОбработал.Параметры.РезультатыОбработалДолжность = Объект.СсылкаНаОбъект.Ответственный.Сотрудник.Должность; 
	ОбластьРезультатыОбработал.Параметры.РезультатыОбработалСотрудник = Объект.СсылкаНаОбъект.Ответственный.Сотрудник;
	ТабДок.Вывести(ОбластьРезультатыОбработал);  
	
	ОбластьЗаведующий.Параметры.ЗаведующийДолжность	= Объект.СсылкаНаОбъект.Ответственный.Лаборатория.Заведующий.Должность; 
	ОбластьЗаведующий.Параметры.Заведующий			= Объект.СсылкаНаОбъект.Ответственный.Лаборатория.Заведующий; 
	ТабДок.Вывести(ОбластьЗаведующий);
	#КонецОбласти
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц(); 
	
	//Приложение картинки
	#Область ТестКартинки
	
	МассивРасширенийКартинок = Новый Массив;
	МассивРасширенийКартинок.Добавить("png");
	МассивРасширенийКартинок.Добавить("jpeg");	
	МассивРасширенийКартинок.Добавить("jpg");
	МассивРасширенийКартинок.Добавить("gif"); 	 
	МассивРасширенийКартинок.Добавить("bmp");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Файлы.Ссылка КАК Файл,
	               |	Файлы.ТекущаяВерсияРасширение
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               |	Файлы.ВладелецФайла = &ВладелецФайла
	               |	И Файлы.ТекущаяВерсияРасширение В(&СписокРасширений)
	               |	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла",    Объект.СсылкаНаОбъект);   	
	Запрос.УстановитьПараметр("СписокРасширений", МассивРасширенийКартинок); 
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда
		
		Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
		ОбластьПриложениеЗаголовок = МакетОбработки.ПолучитьОбласть("ПриложениеЗаголовок");
		ОбластьПриложениеЗаголовок.Параметры.Номер = Объект.СсылкаНаОбъект.НомерВЖурнале;
		ТабДок.Вывести(ОбластьПриложениеЗаголовок);
		
		Для каждого Стр Из Результат Цикл   
			
			ОбластьПриложение = МакетОбработки.ПолучитьОбласть("Приложение");
						
			Адрес = ПолучитьДанныеФайлаДляОткрытия(Стр.Файл);
			ДвДанныеФайл = ПолучитьИзВременногоХранилища(Адрес);
			
			ИмяВремФайла 		= ПолучитьИмяВременногоФайла(Стр.ТекущаяВерсияРасширение);
			ДвДанныеФайл.Записать(ИмяВремФайла);
			
			ПутьИИмя = ИмяВремФайла;
			Путь = "";
			Имя  = "";
			ПозСлэш = Найти(ПутьИИмя,"\");
			Пока ПозСлэш > 0 Цикл
				Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
				ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
				ПозСлэш = Найти(ПутьИИмя,"\");
			КонецЦикла;
			Имя = ПутьИИмя;
			
			КатологВремФайлов 	= СтрЗаменить(ИмяВремФайла, ПутьИИмя, "");
			
			
			objShellApp = Новый COMОбъект("Shell.Application");
			objFolder	= objShellApp.NameSpace(СокрЛП(КатологВремФайлов));
			objItem		= objFolder.ParseName(СокрЛП(Имя)); 
			размеры		= objFolder.GetDetailsOf(objItem, 31); 
			размеры 	= СтрЗаменить(размеры, Символ(8236), ""); //
			размеры 	= СтрЗаменить(размеры, Символ(8234), ""); //
			р 			= Найти(размеры, "x");
			ширина 		= Число(Лев(размеры, р - 1));
			высота 		= Число(Сред(размеры, р + 2));
			
			Если Ширина > 160 Тогда
							
				Коэф = Ширина/160;
				Высота = высота/Коэф;
				Ширина = Ширина/Коэф;
			ИначеЕсли Высота > 300 Тогда
				
				Коэф = высота/300;
				Высота = высота/Коэф;
				Ширина = Ширина/Коэф;
				
			КонецЕсли;
			
			Рисунок = ОбластьПриложение.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
			Рисунок.Верх 	= 5; 
			Рисунок.Высота 	= высота; 
			Рисунок.Ширина 	= ширина; 
			Рисунок.Лево 	= 5; 
			Рисунок.Картинка = Новый Картинка(ДвДанныеФайл); 
			Рисунок.Линия 	 = Линия;
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально; 
			
			//Картинка = Новый Картинка(ДвДанныеФайл);    		
			//ОбластьКартинка.Рисунки.D1.Картинка =  Картинка;   		 
			ТабДок.Вывести(ОбластьПриложение);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	#КонецОбласти	


	//Нижний колонтитул
	ТабДок.НижнийКолонтитул.НачальнаяСтраница = 1;
	ТабДок.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабДок.РазмерКолонтитулаСнизу = 15;
   
    ТабДок.НижнийКолонтитул.ТекстСправа = "Страница________из________" ;                            
	ТабДок.НижнийКолонтитул.ТекстВЦентре = "
	|Результаты лабораторных испытаний не могут быть воспроизведены полностью или частично без письменного 
	|разрешения ИЛЦ ФБУЗ ""Центр гигиены и эпидемиологии в Самарской области"""; 
	ТабДок.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8,,Истина);
	ТабДок.ПолеСнизу = 20;			
	ТабДок.НижнийКолонтитул.Выводить = Истина; 
	ТабДок.ОтображатьСетку = Ложь; 
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Возврат ТабДок;

	
КонецФункции

&НаСервере
Функция ПечатьИзМодуляОбъекта(ТипПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.РазмерКолонтитулаСнизу	= 10;
	ТабДок.ПолеСнизу				= 15;
	//ТабДок.РазмерСтраницы			= "А4";
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;  
	
	
	ДанныйОбъект   = РеквизитФормыВЗначение("Объект");
	Если ТипПечати = "Протокол" Тогда
		ПолучСтруктура = ДанныйОбъект.ФормированиеТабличногоДокумента_Протокола(Объект.СсылкаНаОбъект, ТабДок);
	Иначе
		ПолучСтруктура = ДанныйОбъект.ФормированиеТабличногоДокумента_Экспертного(Объект.СсылкаНаОбъект, ТабДок);
	КонецЕсли;
	
	
	Для щщ = 0 По ПолучСтруктура.Количество()-1 Цикл   				
		
		ТабДок.Вывести(ПолучСтруктура["табдок" + Строка(щщ + 1)]);
		
	КонецЦикла;   	

	Возврат табдок;

	
КонецФункции

// Делает ПолучитьДанныеФайла + ПоместитьВоВременноеХранилище (если файл хранится на диске)
// Функция возвращает структуру, содержащую различные сведения о Файле и версии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаДляОткрытия(
	ФайлСсылка, 
	ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, 
	РабочийКаталогВладельца = Неопределено,
	ПредыдущийАдресФайла = Неопределено) Экспорт
	//
	//Если ПредыдущийАдресФайла <> Неопределено Тогда
	//	Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
	//		УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
	//	КонецЕсли;	
	//КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = ПолучитьРабочийКаталог(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ИмяФайлаСПутемВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
					   |	ВерсииФайлов.Том КАК Том
					   |ИЗ
					   |	Справочник.ВерсииФайлов КАК ВерсииФайлов
					   |ГДЕ
					   |	ВерсииФайлов.Ссылка = &Версия";
					   
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = ""; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
						
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);   			
			
		
			//мФайл = Новый Файл(ИмяВрем);
			//ДвДанныеФайл = Новый ДвоичныеДанные(ИмяФайла);		
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			
			Возврат Адрес;
			
			
				
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецФункции // ПолучитьДанныеФайлаДляОткрытия()

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки)
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//
// Возвращаемое значение:
//   Строка  - рабочий каталог
Функция ПолучитьРабочийКаталог(СсылкаПапки) Экспорт
	
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат ""
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

#КонецОбласти


//======================================================================================================================





